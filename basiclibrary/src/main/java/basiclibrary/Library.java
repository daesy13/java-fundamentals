/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.HashMap;
import java.util.HashSet;
import java.util.*;


public class Library {

    public static void main(String[] args) {
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    //Write a method called roll that accepts an integer n and rolls a six-sided dice n times.
    // The method should return an array containing the values of the rolls.
    public static int[] roll(int n) {
        Random randgen = new Random();
        int[] newArr = new int[n];
        for (int i = 0; i < n; i++) {
            newArr[i] = randgen.nextInt(6) + 1;
        }
        return newArr;
    }

    //Write a method called containsDuplicates that returns true or false
    // depending on whether the array contains duplicate values.
    public static boolean containsDuplicates(String[] args) {
        boolean result = true;
        for (int i = 0; i < args.length; i++) {
            for (int j = args.length - 1; j >= 0; j--) {
                if (args[i] == args[j]) {
                    return result;
                } else {
                    return result = false;
                }
            }
        }
        return result;
    }

    //Calculating Averages: Write a method that accepts an array of integers and calculates and
    // returns the average of all the values in the array.
    public static int calculatingAverage(int[] num) {
        int result = 0;
        int len = num.length;
        for (int i = 0; i < num.length; i++) {
            result += num[i];
        }
        return result / len;
    }

    // Arrays of Arrays: Given an array of arrays calculate the average value for each array
    // and return the array with the lowest average.
    public static int arrayAverage(int[][] multiArr) {
        int max = Integer.MAX_VALUE;
        int sum = 0;
        int average = 0;
        for (int i = 0; i < multiArr.length; i++) {
            for (int j = 0; j < multiArr[i].length; j++) {
                sum += multiArr[i][j];
            }
            average = sum / multiArr[i].length;
            sum = 0;
            if (average < max) {
                max = average;
            }
        }
        return max;
    }


//    LAB 3
//    Use the October Seattle weather data above. Iterate through all of the data to find the min and max values.
//    Use a HashSet of type Integer to keep track of all the unique temperatures seen. Finally, iterate from
//    the min temp to the max temp and create a String containing any temperature not seen during the month.

    public static String mapi(int[][] multiArr) {
        HashSet<Integer> weather = new HashSet<>();
        String tempInfo = "";
        // iterate the multiarray and input data into a hashset to remove duplicates
        for (int[] week : multiArr) {
            for (int day : week) {
                weather.add(day);
            }
        }
        // collecting min and max
        int max = Collections.max(weather);
        tempInfo += String.format("High: %d%n", max);
        int min = Collections.min(weather);
        tempInfo += String.format("Low: %d%n", min);
        // checking if a num btwn min and max is not there
        for (int i = min; i <= max; i++){
            if (!weather.contains(i)){
                tempInfo += String.format("Never saw temperature: %d%n", i);
            }
        }
        return tempInfo;
    }

    // Write a function called tally that accepts a List of Strings representing votes and returns
    // one string to show what got the most votes
    public static String tally(List<String> runners){
//        set up first item in array to be winner
        String winnerHolder = runners.get(0);
//        set up new hashmap
        HashMap<String, Integer> myMap = new HashMap<>();
//        for each
        for(String candidate : runners){
            if (myMap.containsKey(candidate)){
                myMap.put(candidate, myMap.get(candidate)+1);
            }
            else{
                myMap.put(candidate, 1);
            }
//            add count and compare to the fake winner
            if(myMap.get(candidate)> myMap.get(winnerHolder)){
                winnerHolder = candidate;
            }
        }
        return String.valueOf(winnerHolder + " received the most votes!");
    }
}