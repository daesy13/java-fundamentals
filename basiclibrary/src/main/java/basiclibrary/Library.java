/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import javax.lang.model.SourceVersion;
import java.util.*;


public class Library {
//    public boolean someLibraryMethod() {
//        return true;
//    }

    static int[] roll(int n){
        Random randgen = new Random();
        int[] newArr = new int[n];

        for (int i = 0; i < n; i++){
            newArr[i] = randgen.nextInt(6);
        }
        System.out.println(Arrays.toString(newArr));
        return newArr;
    }

    static boolean containsDuplicates( String[] args){
        boolean result = true;
        for (int i = 0; i < args.length; i++) {
            for (int j = args.length - 1; j >= 0; j--){
                if (args[i] == args[j]) {
                    return result;
                } else {
                    return result = false;
                }
            }
        }
        return result;
    }

//    LAB 3
//Use the October Seattle weather data above. Iterate through all of the data to find the min and max values.
//    Use a HashSet of type Integer to keep track of all the unique temperatures seen. Finally, iterate from
//    the min temp to the max temp and create a String containing any temperature not seen during the month.
    //Return that String.

    static String[] maps(int[][] multiArr){
        HashSet<Integer> weather = new HashSet<>();
        for (int i = 0; i < multiArr.length; i++){
            for (int j=0; j < multiArr[0].length; j++){
                // Creating a HashSet
                weather.add(multiArr[i][j]);
                System.out.println("weather = " + weather);
            }
        }
        // convert set into list
        List<Integer> numbersList = new ArrayList<Integer>(weather);
        // sort list
       Collections.sort(numbersList);
       int start = numbersList[0];
       int end = numbersList[numbersList.length-1];
       for (int k = 0; k < numbersList.length; k++){
       }
    }
}
